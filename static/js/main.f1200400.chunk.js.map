{"version":3,"sources":["components/InputBlock/InputBlock.module.scss","components/Counter/CounterInput/CounterInput.module.scss","components/Counter/Counter.module.scss","components/Counter/CounterButton/CounterButton.module.scss","components/Counter/CounterInput/CounterInput.tsx","components/Counter/CounterButton/CounterButton.tsx","store/reducers/count_reducer.ts","components/Counter/Counter.tsx","store/reducers/maxValue_reducer.ts","store/reducers/startValue_reducer.ts","components/InputBlock/InputBlock.tsx","App.tsx","store/store.ts","index.tsx"],"names":["module","exports","CounterInput","count","maxValue","className","classes","input","error","CounterButton","changes","disabled","title","onClick","btn","initialState","Counter","dispatch","local","counter","btns","type","newCount","resetCountAC","startValue","InputBlock","inputBlockWrap","inputArea","inputItem","inputTitle","decHandler","newMaxValue","incHandler","newValue","newStartValue","alert","Input","dec","tabIndex","value","inc","App","store","state","getState","maxValueReducer","startValueReducer","countReducer","reducers","combineReducers","action","createStore","rerender","ReactDOM","render","StrictMode","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.f1200400.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputBlockWrap\":\"InputBlock_inputBlockWrap__2EfyV\",\"inputArea\":\"InputBlock_inputArea__WHmaP\",\"inputItem\":\"InputBlock_inputItem__1-4Fp\",\"inputTitle\":\"InputBlock_inputTitle__3-ks1\",\"input\":\"InputBlock_input__1OXzP\",\"dec\":\"InputBlock_dec__16v71\",\"inc\":\"InputBlock_inc__2DqY0\",\"btn\":\"InputBlock_btn__m-rAv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"CounterInput_input__1_aK2\",\"error\":\"CounterInput_error__wjSrK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__TPySr\",\"btns\":\"Counter_btns__2z-pP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"CounterButton_btn__k13wD\"};","import React from 'react'\nimport classes from './CounterInput.module.scss'\n\nexport type CounterInputPropsType = {\n    count: number\n    maxValue: number\n}\n\n\nconst CounterInput: React.FC<CounterInputPropsType> = ({count, maxValue}) => {\n\n    return (\n        <div className={`${classes.input} ${count === maxValue ? classes.error : \"\"}`}>\n            {count}\n        </div>\n    )\n}\n\nexport default CounterInput","import React from 'react'\nimport classes from './CounterButton.module.scss'\n\nexport type CounterButtonPropsType = {\n    disabled?: boolean\n    changes: () => void\n    title: string\n}\n\n\nconst CounterButton: React.FC<CounterButtonPropsType> = ({changes, disabled, title}) => {\n\n    return (\n        <button onClick={changes}\n                className={classes.btn}\n                disabled={disabled}>\n            {title}\n        </button>\n    )\n}\n\nexport default CounterButton","import {AllActionTypes, ChangeCountActionType, ResetCountActionType} from '../store';\r\n\r\nconst initialState = {\r\n    count: 0,\r\n}\r\n\r\nexport const countReducer = (state = initialState, action: AllActionTypes) => {\r\n    switch (action.type) {\r\n        case \"CHANGE-COUNT\":\r\n            state.count = action.newCount + 1\r\n            return state\r\n        case \"RESET-COUNT\":\r\n            if (state.count > 0) {\r\n                state.count = 0\r\n            }\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// === ACTION CREATORS ===\r\nexport const changeCountAC = (newCount: number): ChangeCountActionType => {\r\n    return {\r\n        type: \"CHANGE-COUNT\",\r\n        newCount: newCount\r\n    }\r\n}\r\n\r\nexport const resetCountAC = (count: number): ResetCountActionType => {\r\n    return {\r\n        type: \"RESET-COUNT\",\r\n        count: count\r\n    }\r\n}\r\n// === / ACTION CREATORS ===","import React from 'react'\nimport CounterInput from './CounterInput/CounterInput';\nimport CounterButton from './CounterButton/CounterButton';\nimport local from './Counter.module.scss'\nimport {ChangeCountActionType, ResetCountActionType} from '../../store/store';\nimport {changeCountAC, resetCountAC} from '../../store/reducers/count_reducer';\n\nexport type CounterPropsType = {\n    count: number\n    dispatch: (action: ChangeCountActionType | ResetCountActionType) => void\n    maxValue: number\n}\n\n\nconst Counter: React.FC<CounterPropsType> = ({dispatch, count, maxValue}) => {\n\n    const addNewCount = () => {\n        dispatch(changeCountAC(count))\n    }\n\n    const resetCount = () => {\n        dispatch(resetCountAC(count))\n    }\n\n    return (\n        <section className={local.counter}>\n            <CounterInput count={count}\n                          maxValue={maxValue}\n            />\n            <div className={local.btns}>\n                <CounterButton changes={addNewCount}\n                               title=\"inc\"\n                               disabled={count >= maxValue}\n                />\n                <CounterButton title=\"reset\"\n                               changes={resetCount}\n                               disabled={count === 0}\n                />\n            </div>\n        </section>\n    )\n}\n\nexport default Counter","import {AllActionTypes, DecSetMaxValueActionType, IncSetMaxValueActionType} from '../store';\r\n\r\nconst initialState = {\r\n    maxValue: 0\r\n}\r\n\r\nexport const maxValueReducer = (state = initialState, action: AllActionTypes) => {\r\n    switch (action.type) {\r\n        case 'INC-SET-MAX-VALUE':\r\n            state.maxValue = action.newMaxValue + 1\r\n            return state\r\n        case 'DEC-SET-MAX-VALUE':\r\n            if (state.maxValue > 0) {\r\n                state.maxValue = action.newMaxValue - 1\r\n            }\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// === ACTION CREATORS ===\r\nexport const IncSetMaxValueAC = (value: number): IncSetMaxValueActionType => {\r\n    return {\r\n        type: 'INC-SET-MAX-VALUE',\r\n        newMaxValue: value\r\n    }\r\n}\r\n\r\nexport const DecSetMaxValueAC = (value: number): DecSetMaxValueActionType => {\r\n    return {\r\n        type: 'DEC-SET-MAX-VALUE',\r\n        newMaxValue: value\r\n    }\r\n}\r\n// === / ACTION CREATORS ===","import {AllActionTypes, DecSetStartValueActionType, IncSetStartValueActionType} from '../store';\r\n\r\nconst initialState = {\r\n    startValue: 0\r\n}\r\n\r\nexport const startValueReducer = (state = initialState, action: AllActionTypes) => {\r\n\r\n    switch (action.type) {\r\n        case 'INC-SET-START-VALUE':\r\n            state.startValue = action.newStartValue + 1\r\n            return state\r\n        case 'DEC-SET-START-VALUE':\r\n            if (state.startValue > 0) {\r\n                state.startValue = action.newStartValue - 1\r\n            }\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// === ACTION CREATORS ===\r\nexport const IncSetStartValueAC = (value: number): IncSetStartValueActionType => {\r\n    return {\r\n        type: 'INC-SET-START-VALUE',\r\n        newStartValue: value\r\n    }\r\n}\r\n\r\nexport const DecSetStartValueAC = (value: number): DecSetStartValueActionType => {\r\n    return {\r\n        type: 'DEC-SET-START-VALUE',\r\n        newStartValue: value\r\n    }\r\n}\r\n// === / ACTION CREATORS ===","import local from './InputBlock.module.scss';\nimport React from 'react';\nimport CounterButton from '../Counter/CounterButton/CounterButton';\nimport {AllActionTypes} from '../../store/store';\nimport {DecSetMaxValueAC, IncSetMaxValueAC} from '../../store/reducers/maxValue_reducer';\nimport {DecSetStartValueAC, IncSetStartValueAC} from '../../store/reducers/startValue_reducer';\n\ntype InputBlockPropsType = {\n    dispatch: (action: AllActionTypes) => void\n    maxValue: number\n    startValue: number\n}\n\ntype InputType = {\n    newValue: number\n    incHandler: () => void\n    decHandler: () => void\n}\n\nexport const InputBlock: React.FC<InputBlockPropsType> = ({maxValue, startValue, dispatch}) => {\n\n    const alertMessage = () => {\n        alert('Hello!')\n    }\n\n    const incMaxValue = () => {\n        dispatch(IncSetMaxValueAC(maxValue))\n    }\n\n    const decMaxValue = () => {\n        dispatch(DecSetMaxValueAC(maxValue))\n    }\n\n    const incStartValue = () => {\n        dispatch(IncSetStartValueAC(startValue))\n    }\n\n    const decStartValue = () => {\n        dispatch(DecSetStartValueAC(startValue))\n    }\n\n    return (\n        <section className={local.inputBlockWrap}>\n            <div className={local.inputArea}>\n                <div className={local.inputItem}>\n                    <div className={local.inputTitle}>\n                        max value\n                    </div>\n                    <Input decHandler={decMaxValue}\n                           incHandler={incMaxValue}\n                           newValue={maxValue}/>\n                </div>\n                <div className={local.inputItem}>\n                    <div className={local.inputTitle}>\n                        start value\n                    </div>\n                    <Input decHandler={decStartValue}\n                           incHandler={incStartValue}\n                           newValue={startValue}/>\n                </div>\n            </div>\n            <div className={local.btn}>\n                <CounterButton changes={alertMessage}\n                               title=\"set\"/>\n            </div>\n        </section>\n    )\n}\n\nconst Input: React.FC<InputType> = ({decHandler, incHandler, newValue}) => {\n\n    return (\n        <div className={local.input}>\n            <div className={local.dec}\n                 tabIndex={0}\n                 onClick={decHandler}>-</div>\n            <input value={newValue}\n                   type=\"text\"\n            />\n            <div className={local.inc}\n                 tabIndex={0}\n                 onClick={incHandler}>+</div>\n        </div>\n    )\n}\n\n","import React from 'react';\nimport './App.css';\nimport Counter from './components/Counter/Counter';\nimport {InputBlock} from './components/InputBlock/InputBlock';\nimport {StoreType} from './store/store';\n\n\ntype AppPropsType = {\n    store: StoreType\n}\n\nconst App: React.FC<AppPropsType> = ({store}) => {\n\n    const state = store.getState();\n\n    return (\n        <div className=\"App\">\n            <InputBlock maxValue={state.maxValueReducer.maxValue}\n                        startValue={state.startValueReducer.startValue}\n                        dispatch={store.dispatch}\n            />\n            <Counter maxValue={state.maxValueReducer.maxValue}\n                     count={state.countReducer.count}\n                     dispatch={store.dispatch}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import {combineReducers, createStore } from 'redux';\nimport {countReducer} from './reducers/count_reducer';\nimport {maxValueReducer} from './reducers/maxValue_reducer';\nimport {startValueReducer} from './reducers/startValue_reducer';\n\n// === STORE TYPES ===\nexport type StoreType = typeof store\n// === / STORE TYPES ===\n\n// === ACTION TYPES ===\nexport type AllActionTypes = ChangeCountActionType\n    | ResetCountActionType\n    | IncSetMaxValueActionType\n    | DecSetMaxValueActionType\n    | IncSetStartValueActionType\n    | DecSetStartValueActionType\n\nexport type ChangeCountActionType = {\n    type: \"CHANGE-COUNT\"\n    newCount: number\n}\n\nexport type ResetCountActionType = {\n    type: \"RESET-COUNT\",\n    count: number\n}\n\nexport type IncSetMaxValueActionType = {\n    type: \"INC-SET-MAX-VALUE\"\n    newMaxValue: number\n}\n\nexport type DecSetMaxValueActionType = {\n    type: \"DEC-SET-MAX-VALUE\",\n    newMaxValue: number\n}\n\nexport type IncSetStartValueActionType = {\n    type: \"INC-SET-START-VALUE\"\n    newStartValue: number\n}\n\nexport type DecSetStartValueActionType = {\n    type: \"DEC-SET-START-VALUE\",\n    newStartValue: number\n}\n// === / ACTION TYPES ===\n\n// === CREATE STORE ===\nconst reducers = combineReducers({\n    countReducer,\n    maxValueReducer,\n    startValueReducer\n})\n\nexport const store = createStore(reducers);\n// === / CREATE STORE ===\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport {store} from './store/store';\n\nexport const rerender = () => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <App store={store} />\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\nstore.subscribe(rerender)\nrerender()\n"],"sourceRoot":""}
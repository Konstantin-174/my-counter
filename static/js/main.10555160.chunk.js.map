{"version":3,"sources":["components/InputBlock/InputBlock.module.scss","components/Counter/CounterInput/CounterInput.module.scss","components/Counter/Counter.module.scss","components/Counter/CounterButton/CounterButton.module.scss","components/Counter/CounterInput/CounterInput.tsx","components/Counter/CounterButton/CounterButton.tsx","store/store.ts","components/Counter/Counter.tsx","components/InputBlock/InputBlock.tsx","App.tsx","index.tsx"],"names":["module","exports","CounterInput","count","maxValue","className","classes","input","error","CounterButton","changes","disabled","title","onClick","btn","store","_state","startValue","_render","rerender","getState","this","subscribe","callback","dispatch","action","type","newCount","newValue","Counter","local","counter","btns","resetCountAC","InputBlock","props","inputBlockWrap","inputArea","inputItem","inputTitle","decHandler","incHandler","alert","Input","dec","value","placeholder","inc","App","state","bind","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10555160.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputBlockWrap\":\"InputBlock_inputBlockWrap__2EfyV\",\"inputArea\":\"InputBlock_inputArea__WHmaP\",\"inputItem\":\"InputBlock_inputItem__1-4Fp\",\"inputTitle\":\"InputBlock_inputTitle__3-ks1\",\"input\":\"InputBlock_input__1OXzP\",\"dec\":\"InputBlock_dec__16v71\",\"inc\":\"InputBlock_inc__2DqY0\",\"btn\":\"InputBlock_btn__m-rAv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"CounterInput_input__1_aK2\",\"error\":\"CounterInput_error__wjSrK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__TPySr\",\"btns\":\"Counter_btns__2z-pP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"CounterButton_btn__k13wD\"};","import React from 'react'\r\nimport classes from './CounterInput.module.scss'\r\n\r\nexport type CounterInputPropsType = {\r\n    count: number\r\n    maxValue: number\r\n}\r\n\r\n\r\nconst CounterInput: React.FC<CounterInputPropsType> = ({count, maxValue}) => {\r\n\r\n    return (\r\n        <div className={`${classes.input} ${count === maxValue ? classes.error : \"\"}`}>\r\n            {count}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CounterInput","import React from 'react'\r\nimport classes from './CounterButton.module.scss'\r\n\r\nexport type CounterButtonPropsType = {\r\n    disabled?: boolean\r\n    changes: () => void\r\n    title: string\r\n}\r\n\r\n\r\nconst CounterButton: React.FC<CounterButtonPropsType> = ({changes, disabled, title}) => {\r\n\r\n    return (\r\n        <button onClick={changes}\r\n                className={classes.btn}\r\n                disabled={disabled}>\r\n            {title}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default CounterButton","import {rerender} from '../index';\r\n\r\n// === STATE TYPES ===\r\nexport type StateType = {\r\n    maxValue: number\r\n    startValue: number\r\n    count: number\r\n}\r\n\r\nexport type StoreType = {\r\n    _state: StateType\r\n    _render: () => void\r\n    getState: () => StateType\r\n    subscribe: ( callback: () => void) => void\r\n    dispatch: (action: ChangeCountActionType |\r\n        ResetCountActionType |\r\n        IncSetMaxValueActionType |\r\n        DecSetMaxValueActionType |\r\n        IncSetStartValueActionType |\r\n        DecSetStartValueActionType) => void\r\n}\r\n\r\n// === / STATE TYPES ===\r\n\r\n// === ACTION TYPES ===\r\nexport type ChangeCountActionType = {\r\n    type: \"CHANGE-COUNT\"\r\n    newCount: number\r\n}\r\n\r\nexport type ResetCountActionType = {\r\n    type: \"RESET-COUNT\",\r\n    count: number\r\n}\r\n\r\nexport type IncSetMaxValueActionType = {\r\n    type: \"INC-SET-MAX-VALUE\"\r\n    newValue: number\r\n}\r\n\r\nexport type DecSetMaxValueActionType = {\r\n    type: \"DEC-SET-MAX-VALUE\",\r\n    newValue: number\r\n}\r\n\r\nexport type IncSetStartValueActionType = {\r\n    type: \"INC-SET-START-VALUE\"\r\n    newValue: number\r\n}\r\n\r\nexport type DecSetStartValueActionType = {\r\n    type: \"DEC-SET-START-VALUE\",\r\n    newValue: number\r\n}\r\n\r\n\r\n// === / ACTION TYPES ===\r\n\r\nexport const store: StoreType = {\r\n    _state: {\r\n        maxValue: 0,\r\n        startValue: 0,\r\n        count: 0\r\n    },\r\n    _render() {\r\n        rerender();\r\n    },\r\n    getState() {\r\n        return this._state\r\n    },\r\n    subscribe(callback) {\r\n        this._render = callback\r\n    },\r\n    dispatch(action) {\r\n        if (action.type === \"CHANGE-COUNT\") {\r\n            this._state.count = action.newCount + 1\r\n            this._render()\r\n        } else if (action.type === \"RESET-COUNT\") {\r\n            if (this._state.count > 0) {\r\n                this._state.count = 0\r\n            }\r\n            this._render()\r\n        } else if (action.type === \"INC-SET-MAX-VALUE\") {\r\n            this._state.maxValue = action.newValue + 1\r\n            this._render()\r\n        } else if (action.type === \"DEC-SET-MAX-VALUE\") {\r\n            if (this._state.maxValue > 0) {\r\n                this._state.maxValue = action.newValue - 1\r\n            }\r\n            this._render()\r\n        } else if (action.type === \"INC-SET-START-VALUE\") {\r\n            this._state.startValue = action.newValue + 1\r\n            this._render()\r\n        } else if (action.type === \"DEC-SET-START-VALUE\") {\r\n            if (this._state.startValue > 0) {\r\n                this._state.startValue = action.newValue - 1\r\n            }\r\n            this._render()\r\n        }\r\n    }\r\n}\r\n\r\n// === ACTION CREATORS ===\r\nexport const changeCountAC = (newCount: number): ChangeCountActionType => {\r\n    return {\r\n        type: \"CHANGE-COUNT\",\r\n        newCount: newCount\r\n    }\r\n}\r\n\r\nexport const resetCountAC = (count: number): ResetCountActionType => {\r\n    return {\r\n        type: \"RESET-COUNT\",\r\n        count: count\r\n    }\r\n}\r\n\r\nexport const IncSetMaxValueAC = (value: number): IncSetMaxValueActionType => {\r\n    return {\r\n        type: \"INC-SET-MAX-VALUE\",\r\n        newValue: value\r\n    }\r\n}\r\n\r\nexport const DecSetMaxValueAC = (value: number): DecSetMaxValueActionType => {\r\n    return {\r\n        type: \"DEC-SET-MAX-VALUE\",\r\n        newValue: value\r\n    }\r\n}\r\n\r\nexport const IncSetStartValueAC = (value: number): IncSetStartValueActionType => {\r\n    return {\r\n        type: \"INC-SET-START-VALUE\",\r\n        newValue: value\r\n    }\r\n}\r\n\r\nexport const DecSetStartValueAC = (value: number): DecSetStartValueActionType => {\r\n    return {\r\n        type: \"DEC-SET-START-VALUE\",\r\n        newValue: value\r\n    }\r\n}\r\n// === / ACTION CREATORS ===\r\n","import React from 'react'\r\nimport CounterInput from './CounterInput/CounterInput';\r\nimport CounterButton from './CounterButton/CounterButton';\r\nimport local from './Counter.module.scss'\r\nimport {changeCountAC, ChangeCountActionType, resetCountAC, ResetCountActionType} from '../../store/store';\r\n\r\nexport type CounterPropsType = {\r\n    count: number\r\n    dispatch: (action: ChangeCountActionType | ResetCountActionType) => void\r\n    maxValue: number\r\n}\r\n\r\n\r\nconst Counter: React.FC<CounterPropsType> = ({dispatch, count, maxValue}) => {\r\n\r\n    const addNewCount = () => {\r\n        dispatch(changeCountAC(count))\r\n    }\r\n\r\n    const resetCount = () => {\r\n        dispatch(resetCountAC(count))\r\n    }\r\n\r\n    return (\r\n        <section className={local.counter}>\r\n            <CounterInput count={count}\r\n                          maxValue={maxValue}\r\n            />\r\n            <div className={local.btns}>\r\n                <CounterButton changes={addNewCount}\r\n                               title=\"inc\"\r\n                               disabled={count >= maxValue}\r\n                />\r\n                <CounterButton title=\"reset\"\r\n                               changes={resetCount}\r\n                               disabled={count === 0}\r\n                />\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Counter","import local from './InputBlock.module.scss';\r\nimport React from 'react';\r\nimport CounterButton from '../Counter/CounterButton/CounterButton';\r\nimport {\r\n    ChangeCountActionType,\r\n    IncSetMaxValueAC,\r\n    IncSetMaxValueActionType,\r\n    ResetCountActionType,\r\n    DecSetMaxValueActionType,\r\n    DecSetMaxValueAC,\r\n    IncSetStartValueActionType,\r\n    DecSetStartValueActionType,\r\n    IncSetStartValueAC,\r\n    DecSetStartValueAC\r\n} from '../../store/store';\r\n\r\ntype InputBlockPropsType = {\r\n    disabled?: boolean\r\n    dispatch: (action: ChangeCountActionType |\r\n        ResetCountActionType |\r\n        IncSetMaxValueActionType |\r\n        DecSetMaxValueActionType |\r\n        IncSetStartValueActionType |\r\n        DecSetStartValueActionType) => void\r\n    maxValue: number\r\n    startValue: number\r\n    // count: number\r\n}\r\n\r\ntype InputType = {\r\n    newValue: number\r\n    incHandler: () => void\r\n    decHandler: () => void\r\n}\r\n\r\nexport const InputBlock = (props: InputBlockPropsType) => {\r\n\r\n    const alertMessage = () => {\r\n        alert('Hello!')\r\n    }\r\n\r\n    const incMaxValue = () => {\r\n        props.dispatch(IncSetMaxValueAC(props.maxValue))\r\n    }\r\n\r\n    const decMaxValue = () => {\r\n        props.dispatch(DecSetMaxValueAC(props.maxValue))\r\n    }\r\n\r\n    const incStartValue = () => {\r\n        props.dispatch(IncSetStartValueAC(props.startValue))\r\n    }\r\n\r\n    const decStartValue = () => {\r\n        props.dispatch(DecSetStartValueAC(props.startValue))\r\n    }\r\n\r\n    return (\r\n        <section className={local.inputBlockWrap}>\r\n            <div className={local.inputArea}>\r\n                <div className={local.inputItem}>\r\n                    <div className={local.inputTitle}>\r\n                        max value\r\n                    </div>\r\n                    <Input decHandler={decMaxValue}\r\n                           incHandler={incMaxValue}\r\n                           newValue={props.maxValue}/>\r\n                </div>\r\n                <div className={local.inputItem}>\r\n                    <div className={local.inputTitle}>\r\n                        start value\r\n                    </div>\r\n                    <Input decHandler={decStartValue}\r\n                           incHandler={incStartValue}\r\n                           newValue={props.startValue}/>\r\n                </div>\r\n            </div>\r\n            <div className={local.btn}>\r\n                <CounterButton changes={alertMessage}\r\n                               title=\"set\"/>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nconst Input = (props: InputType) => {\r\n\r\n    return (\r\n        <div className={local.input}>\r\n            <div className={local.dec}\r\n                 onClick={props.decHandler}>-</div>\r\n            <input value={props.newValue}\r\n                   type=\"text\"\r\n                   placeholder=\"Enter your value\"\r\n            />\r\n            <div className={local.inc}\r\n                 onClick={props.incHandler}>+\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Counter from './components/Counter/Counter';\r\nimport {InputBlock} from './components/InputBlock/InputBlock';\r\nimport {StoreType} from './store/store';\r\n\r\ntype AppPropsType = {\r\n    store: StoreType\r\n}\r\n\r\nfunction App(props: AppPropsType) {\r\n\r\n    const state = props.store.getState();\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <InputBlock maxValue={state.maxValue}\r\n                        startValue={state.startValue}\r\n                        dispatch={props.store.dispatch.bind(props.store)}\r\n            />\r\n            <Counter maxValue={state.maxValue}\r\n                     count={state.count}\r\n                     dispatch={props.store.dispatch.bind(props.store)}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport {store} from './store/store';\r\n\r\nexport const rerender = () => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <App store={store} />\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nstore.subscribe(rerender)\r\nrerender()\r\n"],"sourceRoot":""}